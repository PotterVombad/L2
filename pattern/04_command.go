package pattern

// паттерн Команда это поведенческий паттерн, позволяющий заворачивать 
//запросы или простые операции в отдельные объекты.
//Это позволяет откладывать выполнение команд, выстраивать их в очереди, 
//а также хранить историю и делать отмену.

//Использование паттерна может решить эти проблемы:
//-Следует избегать привязки вызывающего запроса к конкретному запросу. 
//То есть следует избегать жестко запрограммированных запросов.
//-Должна быть возможность сконфигурировать объект (который вызывает запрос) с помощью запроса.

//Использование паттерна описывает следующее решение:
//-Определите отдельные объекты (command), которые инкапсулируют запрос.
//-Класс делегирует запрос объекту command вместо того, чтобы напрямую реализовать конкретный запрос.

//Плюсы:
//-Инкапсуляция запроса: Команды позволяют инкапсулировать запросы и их параметры, 
//что упрощает добавление новых команд и изменение их поведения.
//-Отмена операций: Паттерн обеспечивает легкую поддержку отмены операций, 
//так как команды могут сохранять свое состояние.
//-Гибкость в управлении операциями: Позволяет создавать сложные структуры команд, 
//такие как комбинации команд, очереди, и т.д.

//Минусы:
//-Увеличение числа классов: В некоторых случаях использование паттерна может привести к увеличению 
//числа классов, что может сделать код менее читаемым.
//-Сложность внесения изменений: Добавление новых команд или изменение существующих команд может 
//потребовать изменения нескольких классов.

import "fmt"

// Command - интерфейс команды
type Command interface {
	Execute()
}

// Receiver - получатель команды
type Receiver struct {
	Name string
}

func (r *Receiver) Action() {
	fmt.Printf("%s executing action\n", r.Name)
}

// ConcreteCommand - конкретная реализация команды
type ConcreteCommand struct {
	receiver *Receiver
}

func NewConcreteCommand(receiver *Receiver) *ConcreteCommand {
	return &ConcreteCommand{receiver: receiver}
}

func (c *ConcreteCommand) Execute() {
	c.receiver.Action()
}

// Invoker - вызывающий объект, который запускает команду
type Invoker struct {
	command Command
}

func (i *Invoker) SetCommand(command Command) {
	i.command = command
}

func (i *Invoker) ExecuteCommand() {
	i.command.Execute()
}