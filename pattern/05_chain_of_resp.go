package pattern

//паттерн Цепочка это поведенческий паттерн, позволяющий передавать запрос по цепочке 
//потенциальных обработчиков, пока один из них не обработает запрос.
//Избавляет от жёсткой привязки отправителя запроса к его получателю, 
//позволяя выстраивать цепь из различных обработчиков динамически.

//Использование паттерна может решить эти проблемы:
//-Следует избегать привязки отправителя запроса к его получателю.
//-Должна быть возможность, что запрос могут обработать более одного получателя.

//Использование паттерна описывает следующее решение:
//-Определяет цепочку объектов-получателей, отвечающих, в зависимости от условий выполнения, 
//либо за обработку запроса, либо за пересылку его следующему получателю в цепочке (если таковой имеется).

// Плюсы:
// -Гибкость и расширяемость: Цепочка обязанностей делает систему гибкой и легко расширяемой, 
//поскольку вы можете добавлять или изменять обработчики без изменения клиентского кода.
//-Избегание прямых зависимостей: Объект, отправляющий запрос, не зависит напрямую от конкретных обработчиков, 
//что улучшает поддерживаемость и управляемость кода.

// Минусы:
// -Гарантированная обработка запроса: Нет гарантии, что запрос будет обработан. 
//Если ни один из обработчиков в цепочке не сможет обработать запрос, он останется необработанным.
//-Потенциальная переоценка: Переоценка в цепочке обработки может быть вызвана неправильным конфигурированием, 
//что усложняет понимание и отладку.

import "fmt"

// Handler - интерфейс обработчика
type Handler interface {
	SetNext(handler Handler)
	Handle(request string)
}

// ConcreteHandler - конкретная реализация обработчика(которых может быть несколько, выстраиваем в нужной последовательности)
type ConcreteHandler struct {
	nextHandler Handler
	name        string
}

func NewConcreteHandler(name string) *ConcreteHandler {
	return &ConcreteHandler{name: name}
}

func (c *ConcreteHandler) SetNext(handler Handler) {
	c.nextHandler = handler
}

func (c *ConcreteHandler) Handle(request string) {
	fmt.Printf("%s handling request: %s\n", c.name, request)

	if c.nextHandler != nil {
		c.nextHandler.Handle(request)
	}
}